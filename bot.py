import telebot

import sqlite3

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot("TOKEN")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
def welcome(chat_id):
    if not auth(chat_id):
        return bot.send_message(chat_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–∏–±–ª–∏–æ—Ç–µ–∫—É. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è.')
    else:
        return bot.send_message(chat_id, '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\nüìö /books - —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥\n‚úÖ /available - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥\nüìñ /me - –º–æ–∏ –∫–Ω–∏–≥–∏')

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def registration(chat_id, full_name):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('library.db') as conn:
        cursor = conn.cursor()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É users
        cursor.execute("INSERT INTO users (chat_id, full_name, menu) VALUES (?, ?, 'main')", (chat_id, full_name))
        conn.commit()

        cursor.close()

    return bot.send_message(chat_id, f'{full_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ë–∏–±–ª–∏–æ—Ç–µ–∫–µ!\n–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /books')

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
def auth(chat_id):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('library.db') as conn:
        cursor = conn.cursor()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º chat_id
        cursor.execute("SELECT id FROM users WHERE chat_id = ?", (chat_id,))
        user = cursor.fetchone()

        cursor.close()

    return user[0] if user else None

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def menu(chat_id):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('library.db') as conn:
        cursor = conn.cursor()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT menu FROM users WHERE chat_id = ?", (chat_id,))
        user = cursor.fetchone()

        cursor.close()

    return user[0] if user else None

# –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def set_menu(chat_id, menu):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('library.db') as conn:
        cursor = conn.cursor()

        # –ó–∞–ø–∏—Å—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ–Ω—é
        cursor.execute("UPDATE users SET menu = ? WHERE chat_id = ?", (menu, chat_id))
        conn.commit()

        cursor.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥
def get_books(chat_id, available = False):
    if not auth(chat_id):
        return welcome(chat_id)
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('library.db') as conn:
        cursor = conn.cursor()

        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥
        query = """
        SELECT b.id, b.title, a.full_name, g.name, strftime('%Y', b.publication_date), b.description, b.pages_number,
            CASE 
                WHEN EXISTS (SELECT 1 FROM book_user AS bu WHERE bu.book_id = b.id AND bu.end_date IS NULL) THEN 0
                ELSE 1
            END AS is_available
        FROM books AS b 
        INNER JOIN authors AS a ON b.author_id = a.id 
        INNER JOIN genres AS g ON b.genre_id = g.id
        """
        
        if available:
            query += """
            WHERE is_available = 1
            """
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞–≤—Ç–æ—Ä–∞—Ö –∏ –∂–∞–Ω—Ä–∞—Ö
        cursor.execute(query)
        books = cursor.fetchall()

        cursor.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if not available:
        bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥...')
    else:
        bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥...')
    
    return bot.send_message(chat_id, format_books(books), 'HTML')

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑—è–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def get_user_books(chat_id):
    if not auth(chat_id):
        return welcome(chat_id)
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('library.db') as conn:
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
        SELECT b.id, b.title, strftime('%d.%m.%Y', bu.start_date)
        FROM books AS b
        LEFT JOIN book_user AS bu ON b.id = bu.book_id
        WHERE bu.user_id = ? AND bu.end_date IS NULL
        """, (auth(chat_id),))
        books = cursor.fetchall()
        
        user_books = ""
        for book in books:
            id, title, start_date = book
            user_books += f'[‚Ññ{id}] {title} (–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date})\n'

        cursor.close()

    if len(user_books) == 0:
        user_books = "—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç );"

    bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–Ω–∏–≥...')
    return bot.send_message(chat_id, user_books)

# –ù–∞—á–∞–ª–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def reserve_start(chat_id):
    if not auth(chat_id):
        return welcome(chat_id)
    
    set_menu(chat_id, 'reserve')

    return bot.send_message(chat_id, '–ß—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ—ë –Ω–æ–º–µ—Ä.')


# –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def reserve(chat_id, book_id):
    if not auth(chat_id):
        return welcome(chat_id)
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('library.db') as conn:
        cursor = conn.cursor()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT id FROM books WHERE id = ?", (book_id,))
        book_exists = cursor.fetchone()
        
        if not book_exists:
            set_menu(chat_id, 'main')
            return bot.send_message(chat_id, f'–ö–Ω–∏–≥–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {book_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /available')

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º book_id
        cursor.execute("SELECT book_id FROM book_user WHERE book_id = ? AND end_date IS NULL", (book_id,))
        book_reserved = cursor.fetchone()

        if book_reserved:
            set_menu(chat_id, 'main')
            return bot.send_message(chat_id, f'–ö–Ω–∏–≥–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {book_id} –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /available')

        # –ó–∞–ø–∏—Å—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
        cursor.execute("INSERT INTO book_user (book_id, user_id, start_date) VALUES (?, ?, DATE('now'))", (book_id, auth(chat_id)))
        conn.commit()

        cursor.close()
        
    set_menu(chat_id, 'main')

    return bot.send_message(chat_id, f'–ö–Ω–∏–≥–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {book_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞.\n–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /me')

# –ù–∞—á–∞–ª–æ —Å–¥–∞—á–∏ –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def back_start(chat_id):
    if not auth(chat_id):
        return welcome(chat_id)
    
    set_menu(chat_id, 'back')

    return bot.send_message(chat_id, '–ß—Ç–æ–±—ã —Å–¥–∞—Ç—å –∫–Ω–∏–≥—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ—ë –Ω–æ–º–µ—Ä.')

# –°–¥–∞—á–∞ –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def back(chat_id, book_id):
    if not auth(chat_id):
        return welcome(chat_id)
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('library.db') as conn:
        cursor = conn.cursor()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º book_id
        cursor.execute("SELECT book_id FROM book_user WHERE book_id = ? AND user_id = ? AND end_date IS NULL", (book_id, auth(chat_id)))
        book_reserved = cursor.fetchone()

        if not book_reserved:
            set_menu(chat_id, 'main')
            return bot.send_message(chat_id, f'–ö–Ω–∏–≥–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {book_id} –Ω–µ –±—ã–ª–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤–∞–º–∏ —Ä–∞–Ω–µ–µ.\n–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /me')

        # –ó–∞–ø–∏—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
        cursor.execute("UPDATE book_user SET end_date = DATE('now') WHERE book_id = ? AND user_id = ?", (book_id, auth(chat_id)))
        conn.commit()

        cursor.close()
        
    set_menu(chat_id, 'main')

    return bot.send_message(chat_id, f'–ö–Ω–∏–≥–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {book_id} —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.\n–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /available')

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥
def format_books(books):
    books_info = ""
    
    # –û–±—Ö–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
    for book in books:
        id, title, author, genre, publication_date, description, pages_number, is_reserved = book
        books_info += f"<b>‚Ññ{id}</b>\n"
        books_info += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:</b> {title}\n"
        books_info += f"<b>–ê–≤—Ç–æ—Ä:</b> {author}\n"
        books_info += f"<b>–ñ–∞–Ω—Ä:</b> {genre}\n"
        books_info += f"<b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {publication_date} –≥–æ–¥\n"
        books_info += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
        books_info += f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:</b> {pages_number}\n\n"
    
    return books_info

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "/start"
@bot.message_handler(commands=['start'])
def start_message(message):
    return welcome(message.chat.id)
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "/books"
@bot.message_handler(commands=['books'])
def books_message(message):
    return get_books(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "/available"
@bot.message_handler(commands=['available'])
def available_message(message):
    return get_books(message.chat.id, True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "/me"
@bot.message_handler(commands=['me'])
def me_message(message):
    return get_user_books(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "/reserve"
@bot.message_handler(commands=['reserve'])
def reserve_message(message):
    return reserve_start(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "/back"
@bot.message_handler(commands=['back'])
def back_message(message):
    return back_start(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(func=lambda message: True)
def message(message):
    if not auth(message.chat.id):
        return registration(message.chat.id, message.text)
    
    current_menu = menu(message.chat.id)
        
    if current_menu == 'reserve':
        return reserve(message.chat.id, message.text)
    elif current_menu == 'back':
        return back(message.chat.id, message.text)
    else:
        return welcome(message.chat.id)
        

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()